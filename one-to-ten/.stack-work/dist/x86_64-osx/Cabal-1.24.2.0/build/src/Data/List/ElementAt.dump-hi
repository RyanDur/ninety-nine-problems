
==================== FINAL INTERFACE ====================
2017-10-01 23:59:34.58316 UTC

interface one-to-ten-0.1.0.0-GMW0cwlHCIMF7v8w30g4Rz:Data.List.ElementAt 8002
  interface hash: 417baede05d95a04be843221aaf41b60
  ABI hash: 872fee4a0635fb601b876d4de6ad980d
  export-list hash: 6d92fcce2db7c8c026149987e670c624
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 03754cd516754e76af183aba02f87c4d
  sig of: Nothing
  used TH splices: False
  where
exports:
  Data.List.ElementAt.element_at
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
1d67e530f74aa198658d46c3126f575d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Data.List.ElementAt.$trModule2
                   Data.List.ElementAt.$trModule1) -}
0f546f247ee68195f37cec98127a15b6
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Data.List.ElementAt"#) -}
4efe121c0e1d0310a771c028ad5d893f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "one-to-ten-0.1.0.0-GMW0cwlHCIMF7v8w30g4Rz"#) -}
dd7f17ea78020ebccbfef12776e4822b
  $welement_at :: [a] -> GHC.Prim.Int# -> a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
a318c079e2cf0906e0c38bb61f4ec557
  element_at :: [a] -> GHC.Types.Int -> a
  {- Arity: 2, Strictness: <S,1*U><S(S),1*U(1*U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: [a]) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Data.List.ElementAt.$welement_at @ a w ww1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

